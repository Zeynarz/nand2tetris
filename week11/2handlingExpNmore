HANDLING EXPRESSIONS
----------------------
Let's take a look at a few examples of expressions

Remember that the grammar of an expression is 
expression: term (op term)*

Examples:
5
x
x + 5
Math.abs(x + 5)
arr[Math.abs(x + 5)]
foo(arr[Math.abs(x + 5)])
...

There is an infinite number of expressions of infinite complexity.
So how can we translate ANY expression, into vm code?

Well first we have to learn a little more about expressions


Knowing more about expressions notation
==================================================================================================

Example:

    *
   / \ 
  a   +
     / \
    b   c

(This is the parse tree of " a * (b + c)")

 a * (b + c)  #INFIX

This notation is called infix, it is human oriented. When we humans want to say add b and c together,
and then times a, we humans say " a * (b + c) ".

We humans express "add b and c together, and then times a" by using " a * (b + c) ".


There is also another notation called prefix

 * a + b c  #PREFIX

(This notation is also called functional notation)
In this notation, we put the operators(*,+), before the operands (a,b,c)


Finally, we also have something called postfix notation

 a b c + *  #POSTFIX

In this notation,we put the operands(*,+) AFTER the operators (a,b,c).
I would like to point out that is notation looks very similar to our stack langauge/vm language

If we follow the postfix notation and write the corresponding pseudo vmcode:

push a 
push b
push c
add
mult

This pseudo vmcode will actually compute "a * (b + c)"


Jack expressions are infix. The vm language is postfix.

So what we actually want to do is we want to translate our infix Jack expressions, into postfix.
This way we can just follow the postfix notation and write the corresponding vmcode

Now the questions is how can we translate from infix to postfix?


Translating from infix to postfix
==================================================================================================

Let's take a look at another expression.

Example:

source code: x + g(2,y,-z) * 5

parse tree:

        +
       / \
      x   *
         / \
        g   5
       /|\
      2 y -
          |
          z

(We can generate the parse tree by using the parser we built in project 10)

So what we WANT is that the compiler generates pseudo vmcode like this after compiling the source code
pseudo vmcode:

push x
push 2
push y
push z
-
call g
push 5
*
+

(In this example, there is operator priority, so the multiplication is done before the addition)

So how can you generate this pseudo vm code? Well we already know we have to translate from infix to
postfix, but how do we do that?


Well we can use an algorithm called depth-first tree traversal on the parse tree.
(This algorithm is explained very briefly here and not not elaborated a lot, this is because we won't
actually be using this algorithm in the Jack compiler and actually use another method. If you want to
learn more tho,

Algorithm explanation (By geeksforgeeks) : 
https://www.geeksforgeeks.org/dfs-traversal-of-a-tree-using-recursion/)

So you begin on the root of the tree, which is "+" in this case, and you go all the way down until
you hit a terminal leaf. So you go all the way down and find "x", you output "push x", then you 
backtrack to the root. 

Once again you go all the way down,and you'd get to "2", so you "push 2", you backtrack to the closest 
node which is "g" and you go all the way down and you "push y" and so on and so forth

This algorithm is not used because the parse tree of a real Jack program will be gigantic.
So it would take up quite some time for the compiler to generate the parse tree and operate the 
algorithm on the parse tree.

We will actually use another recursive way to compile expressions


Another method to compile expressions
==================================================================================================

With this method, we are actually going to generate the vm code on the fly without having to
generate the parse tree first.

The method is actually a highly recursive function.

Example: x + g(2,y,-z) * 5

codeWrite(exp):
    
    if exp is a number n:
        output "push n" // In the actual code of codeWrite, we would output "push constant n" 

    if exp is a variable var:
        output "push var" // We would actually output "push memorySegment num" by looking up the 
                             symbol table
    
    if exp is "exp1 op exp2":
        codeWrite(exp1)
        codeWrite(exp2)
        output "op"

    if exp is "op exp":
        codeWrite(exp)
        output "op"

    if exp is "f(exp1,exp2,...)"
        codeWrite(exp1)
        codeWrite(exp2)

So codeWrite receives an expression, and generates vmcode from it.
If the expression is a number, it will simply output "push constant number"
So if the expression is 5, it will output "push constant 5"

If the exp is a variable, it will simply output "push memorySeg num"
So if the expression is "x", it will output something like "push local 1" //local 1 is randomly made up

If the exp is "exp1 op exp2", like "a + b". It will first generate code for "a", then generate code for
"b", then output the operator
So:
push a
push b
+

This can also be used for examples like " a * b + c", where exp1 = a * b, and exp 2 = c. So it would
first codeWrite(a * b), which means codeWrite(a) (output "push a"), codeWrite(b) (output "push b") and
then output  "*"
then codeWrite(c), which just outputs "push c"
then output "+"

So the final would look like:
push a 
push b
*
push c 
+

which is exactly what we want

If the expression is a unary operator followed another expression,for example "-x", codeWrite will
codeWrite(x) which outputs "push x" then outputs "-", so:

push x
-

which is what we want

Finally if the expression is a function call, for example g(2,y,-z), we first codeWrite all the 
arguments, so codeWrite(2),codeWrite(y) and codeWrite(-z). And then we output "call g"

codeWrite(2) : push 2
codeWrite(y) : push y
codeWrite(-z): push z; -

So the final would look smthg like this:

push 2
push y
push z
-
call g

which is what we want


So if "x + g(2,y,-z) * 5" is put into codeWrite, it would output some like this:

push x
push 2
push y
push z
-
call g
push 5
* 
+

Important points about switching from parsing to code generation
==================================================================================================

Now some important points about switching from parsing (which is what we did in the last module) to
code generation (what we are doing in this module)

Source code: let x = a + b - c;

Previously our task was to parse this code and generate an output like:

<letStatement>
    <keyword> let </keyword>
    <identifier> x </identifer>
    ...

Currently, our task is to translate this source code into vm code, and generate an output like:
push a 
push b
+
push c
- 
pop x

But don't think that what we did in the previous module was a waste, the compilationEngine that we made
in the last module is applicable in this project. But instead of generating xml code, the compiler 
should generate vmcode


Let's look at another point.

source code: let x  = a + b * c

One compiler (compiler A) might generate vm code like this:

push a 
push b
+
push c
*
pop x

whereas another compiler (compiler B) might generate vmcode like this:

push a
push b
push c
*
+
pop x

Compiler A does not have operator priority whereas compiler B has operator priority.

Which compiler is the acceptable compiler?
Both compilers are both acceptable, the Jack language as mentioned before, does not have operator 
priority. Compiler B just went the extra mile and implemented operator priority, which is great.

(The Jack language has no operator priority to make the writing of the compiler easier.)

The feature of operator priority completely depends on the compiler developer,if he/she wants to
include operator priority, fine, if he/she does not want to include operator priority, fine too.

Of course, if there are parantheses, for example:
let x = a + (b * c)

Both compilers should respect the parantheses and only output:

push a
push b
push c
*
+
pop x




HANDLING FLOW OF CONTROL / STATEMENTS
--------------------------------------
In the Jack langauge there are 5 possible statements,let,while,if,return,do. After knowing how to 
handle expressions, handling let and do statements are trivial. Handling return statements are quite
simple too. The only two interesting statements to handle/translate are if and while statements, which
are the flow of control/branching statements

Remember that if and while statements have a pattern/structure and have a particular grammar.

if (expression) {
    statements
} else {
    statements
}

while (expression) {
    statements
}

Knowing the structure of the if and while statements, we can create a general/generic way to handle
while and if statements.

Let's start translating if and while statements.

Translating if statements
==================================================================================================

If statements

source code:

if (expression)
    statements1
else 
    statements2

The if statement can be rewritten in the form of a flow chart

                  |
      false      not      true
    --------(expression)--------
    |                          |
    v                          v
statement1                 statement2
    |                          |
    |                          |
    ----->--------|-------<-----
                  |
                 ...

If the expression was true (for example 2 > 1), not(expression) is false, so statements1 is executed
If the expression was false (for example 1 > 2), not(expression) is true, so statements2 is executed

Everything checks out,so the flow chart is correct, it matches correctly with the if statement


Now you might wonder why the expression is negated, this is to make code generation become simpler
and tighter. 


The pseudo vmcode generated for if statements is:

    compiled(expression) 
    not
    if-goto L1
    compiled(statements1)
    goto L2

label L1
    compiled(statements2)

label L2
    ...


(compiled(expression) is just translated expression (like push x;push 1; gt))

This generated code is practically the same as the flow chart/ follows the flow chart
(You dont necessarily need this flow chart to come up with this code,the flow chart is just nice to 
have)

if not(expression) == true, goto statement2, if not(expression) == false, goto statement1

These labels are generated by the compiler,the labels generated must be unique to prevent bugs


Given any if statement, you can use this structure/format to systematically translate the Jack code
and generate the vmcode.

An example of compiled if statement using the structure/format above:
Pseudo Source code: 

if (x > 1) 
    let y = 12
else 
    let y = 1;

Pseudo vm code:
    
    push x
    push 1
    gt
    not
    if-goto L1
    push 12
    pop y
    goto L2

label L1
    push 1
    pop y
    
label L2
    ...



Well I have thought about what if you DONT negate the expression, and I think the pseudo vm code
will look something like this if there is no negation

(Jack source code same as line 348)

    compiled(expression) 
    if-goto L1
    compiled(statements2)
    goto L2

label L1
    compiled(statements1)

label L2
    ...

(Im not sure if there are any errors/special edge cases in this pseudo vm code, but if there aren't, 
wouldn't this be a simpler pseudo vm code? Does negating the expression really make the code 
generation tighter and simpler for if statements?)

(Now I know, the instructor's pseudo vm code is better since it follows the structure of the jack code, so the
writing the compiler is an easier job. In the jack code, you first encounter expression,then statement1,then
statement2, so the instructor's code is better)

Translating while statements
==================================================================================================

Now let's take a look at while statements

Source code:
while (expression)
    statements
...

Again let's rewrite the statement in the form of a flow chart

        |
---->---|
|       |
|      not       yes
|  (expression)--->---
|       |            |
^       v no         |
|       |            |
|   statements       |
|       |            |
----<----            |
                     |
                     |
         -------------
         |
         v
        ...

The flow chart begins again by negating the expression (to , again make code generation tighter and
simpler)

If the expression is true,not(expression) is false, so the statements are executed
If the expression is false,not(expression) is true, so loop is escaped


The generated code will look like this:

label L1
    compiled(expression)
    not
    if-goto L2
    compiled(statements)
    goto L1

label L2

Again, this generated code is practically the same as the flow chart/follows the flow chart, and you 
dont necessarily need this flow chart to come up with this code,the flow chart is just nice to have

if not(expression) == true, escape the loop
if not(expression) == false,execute the statements and repeat the loop.


Given any while statement, you can use this structure/format to systematically translate the Jack code
and generate the vmcode.

An example of compiled while statement(following the format/generated code above):

Pseudo source code:
while (x < 5)
    let x = x + 1

Pseudo vm code:

label L1
    push x
    push 5
    lt
    not
    if-goto L2
    push x
    push 1
    add
    pop x
    goto L1

label L2


I have also thought above what if you dont negate the expression for the while statement, I think that
the generated code will look something like this

(Source code same as line 459)

label L1
    compiled(expression)
    if-goto L2
    goto L3

    label L2
        compiled(statements)
        goto L1

label L3

So in the case of while statements, it is obvious that negating the expression will result in a 
cleaner/simpler generated code


Some notes about compiling if and while statements.
==================================================================================================

A program typically contain multiple if and while statements, so we have to make sure that the 
compiler generate labels that are unique


And what about nested while and if statements? Well they are already handled.

Example:

while (expression) {
    if (expression) {
        statements1
    } else {
        statements2
    }
}


Well the generated code of while statements is:

label W1
    compiled(expression)
    not
    if-goto W2
    compiled(statements)
    goto W1

label W2

and since IF is a statement, it is already handled in the compiled(statements) part


More elaborated code:

label W1
    compiled(expression)
    not
    if-goto W2
        //if statement here
            compiled(expression) 
            not
            if-goto I1
            compiled(statements1)
            goto I2

        label I1
            compiled(statements2)

        label I2
            ...
    goto W1

label W2

If there are more if statements and while statements in statements1/statements2, it can still be handled
by the compiled(statements1)/compiled(statements2) part (since if and while are statements)

So the compiler theoretically supports infite nesting


A little recap
==================================================================================================

So now we know how to handle variables, expressions and flow of control. We now basically know 
how to compile a simple procedural language.

Of course we only learned how to compile from high level language to vm language instead of compiling
from high level language all the way down to assembly. But this is because we have already taken 
care of the translation from vm language to assembly.

