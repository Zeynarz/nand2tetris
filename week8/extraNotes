The big picture: program compilation and translation
-------------------------------------------------------
myProg directory contains Foo.jack and Bar.jack

Compiler compiles the whole myProg directory

now myProg directory contains Foo.vm and Bar.vm

VM Translator translates the whole myProg directory

now myProg directory only have one assembly file which is myProg.asm

Booting
--------
There are a few conventions/rules

One file in any VM program directory is expected to be named Main.vm and one VM function in 
Main.vm is expected to be named main

When the VM implementation starts running,or is reset, it starts by calling the argument-less OS function
Sys.init

Sys.init then calls Main.main and enters an infinite loop

Bootstrap code:
The first two instructions that the computer should execute is

SP = 256
call Sys.init (in assembly)

Standard mapping of Hack
-------------------------
address 0-15 : pointers and registers
address 16-255 : static variables
address 256-2047 : stack
address 2048-16383: heap
address 16384-24576: memory mapped I/O

Assembly Symbols
-----------------
for command 'label bar' the symbol generated in assembly should be 'fileName.functionName$bar'
for command 'function functionName', the label generated for the function should 
be 'fileName.functionName'

for assembly labels created for returns,the label should be 'fileName.functionName$ret.i',where i is a 
running integer.
So the first call ret label would be fileName.functionName$ret.0
And the second call ret label would be fileName.functionName$ret.1

The vm code generated by the compiler should be like 'call fileName.functionName'
So if Main.jack calls calc()
Then Main.vm should have 'call Main.calc'


Whats new?
------------
Besides implementing the new branching commands and function commands,what else do we need to add to 
our VM Translator?

Well now the VM Translator should also be able to translate a whole directory of .vm files 

If the VM Translator is fed with a single .vm file, then the asm file should be named fileName.vm
If the VM Translator is fed with a whole directory, then the asm file should be named directory.vm


Extra notes
-------------
Static segments of different files/classes are different
If there are two classes,class1 wont be able to access the static vars of class2, and class2 wont be
able to access the static vars of class1

Example:
If Class1.vm :
push static 0

and Class2.vm:
push static 0

In the final .asm file,the symbols for these static variables are gonna be
@Class1.1 and @Class2.1

