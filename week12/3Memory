THE MEMORY CLASS
------------------
The Memory class features 4 classical operations:
-peek   -alloc
-poke   -deAlloc

They are classical because every operating system out there, implements these operations in one way
or another

Peek and Poke
===================================================================================================
Why do we need peek and poke?
Well one reason is to access I/O devices. High level programmers can just use stuff like readInt() 
and printInt(x) to read and write to I/O devices without worrying about anything. Well this is 
because things like readInt() and printInt(x) are implemented at the OS level.

I/O devices like keyboard and screen use IO mapped memory which are located in the RAM,so in order
to access the host ram and implement functions like readInt() and printInt(x), we need to be able
to read from the host RAM and write to the host RAM using Jack. 

So the OS first has to provide / feature some low-level services like peek() and poke() to facilitate
direct RAM access.

Then based on these low-level services, the OS will be able to provide / feature high-level services 
like I/O management and memory management.


Peek is designed to return the value of a given RAM address
function int peek(int address)

Poke is designed to take a particular address and a 16-bit value, and sets the given RAM address 
to this value.

function int poke(int address,int value)


So if the RAM looks like this:
...
19003: 0000000000000111
...

Memory.peek(19003) will return 7
and Memory.poke(19003,-1) will make the RAM look like this:

...
19003: 1111111111111111
...


So how can we actually implement peek and poke?
The OS is written in Jack, how can we use Jack to access the RAM?

Let's start with a naive solution:
var Array ram;
let ram = Array.new(32768);


This solution will definetely not work.
With how arrays are implemented, the compiler will try to allocate the array of size 32678 in 
the heap using Memory.alloc.

This Memory.alloc call won't work since this size is too big, the size of the heap is less
than 32678.

(The heap in the host RAM is from address 2048 till address 16384)


Now this here is another solution:
class Memory {
    ...
    static array ram;
    ...
    function void init() {
    // Some OS classes have a init function which are used to do all sorts of internal bookkeeping
    // and other purposes. These init functions are probably called in Sys.init (not sure), and 
    // Sys.init is called at the start of the computer. 

        let ram = 0;
        ...
    }

}

"let ram = 0" is exactly what we want!
We can use "let ram = 0" because Jack is a very weakly typed language, and the Jack compiler is 
very forgiving.

Once ram = 0, we can just say "let ram[addr] = val" to set a ram entry
This works since in the compiler, ram[addr] is going to be compiled to ram+addr,which is 0+addr,
which is just addr.

(array access is COMPLETELY handled and implemented in the compiler)

So this "let ram = 0", gives me complete control of the host RAM from the symbolic high level 
language.

(Obviously if the programmer does not know what he or she is doing, they can completely mess up the
computer since they have complete control over the RAM)


Now that we have this complete control over the RAM using this ram array, implementing peek and poke
becomes a piece of cake


(Actually could you implement peek and poke in the VM translator part? Using assembly to implement 
them would prob be more efficient. Just an idea)

Alloc and Dealloc (Heap management)
===================================================================================================
Why do we need alloc and dealloc?
Well high level programs typically create many objects and arrays, and we need some place in 
memory to store these objects and arrays, so we store them in a memory segment called the heap.


So we need to manage this memory resource which we call the heap efficiently. We need to be able
to allocate memory from the heap whenever needed, and we also have to recycle memory of objects
and arrays that are no longer needed

Memory.alloc will get the size of the memory block that it has to allocate as an argument,and then
it finds a block of memory in the heap that is of the required size, and returns the address to
the caller.

function int alloc(int size)


Memory.deAlloc will get the address of a certain object / array, and then recycles the RAM space 
that was allocated to this object / array. This recycled RAM space can be used again, by other
objects / arrays.

function void deAlloc(int object)


A side note about garbage collectors:
    In Jack, it is recommended for high level programmers to have a dispose() function to remove 
    and deAlloc objects that are not used anymore. Jack programmers have to dispose these objects
    and call Memory.deAlloc themselves whereas Java and C# programmers dont have to do these things.
    
    That's because languages like Java and C# have something called a garbage collector, which
    is a process which runs in the background and do these things automatically. So how does
    the garbage collector actually does this?

    Well the garbage collector keeps track of every pointer that are pointing to every object.
    When an object has no pointer pointing to it, the garbage collector will kick in and call
    deAlloc implicitly.


Now let's finally discuss about implementing alloc and deAlloc.


Simple solution
===================================================================================================
Let's start with a simple and naive approach / solution to heap management.

init:
    // This variable free serves as the base address of all the memory which is freely 
    // available for new objects.

    free = heapBase
    
    // free is heapBase, so the whole heap is available for allocation

alloc(size):
    // Everything below free is available for allocation, so we just return the current free,then
    // we update free so it points to available memory again.

    base = free
    free = free + size

    return base

deAlloc(object):
    do nothing to keep this solution simple


So with this solution,

Before alloc(3):                                            After alloc(3):
                 --------                                               --------
free heapBase -> |...   |                                   heapBase -> |      |
                 |      |                                               |      |
                 |      |                                               |      |
                 |      |                                   free     -> |      |
                 |      |                                               |      |
                 |      |                                               |      |
                 --------                                               --------

So this solution will work for a while, until we inevitably run out of memory.
We will run out of memory since we didn't recycle any memory and reuse any memory, so once a 
memory block was allocated, it will be forever allocated, never freed again

So we'll need a better solution

The better solution
===================================================================================================
Let's use a linked list to keep track of available and free heap segments. 
(Just like free() in linux)

During runtime, after the program has created and freed a couple objects and arrays, the linked list
will look something like this: photos/freeList.png

So freeList points to a free chunk,and the free chunk points to another free chunk and so on and
so forth

(The wilderness is also in the freeList)

Every element in this freeList, has the following structure:

        ---------
next -> |       | <---| metadata / overhead
size -> | 7     | <---|
        |       | <------
        |       |       |
        |       |       |     RAM area
        |       |       |---- available 
        |       |       |     for allocation
        |       |       |
        |       | <------
        ---------

Now, with this new linked list, let's reimplement alloc.

Simply explained,

alloc(size):
    find a block of the required size in the linked list, remove the block from the linked list
    and give the address of the block to the caller

dealloc(object):
    append the object/block to the freeList


A more detailed explanation,

alloc(size):
    // segment.size is the size metadata of the free chunk/segment. So segment.size is the 
    // size of the RAM area available for allocation, the size of the metadata is not included

    // So for example in the diagram above describing the structure of elements in the freeList,
    // segment.size is 7
    
 
    Criteria of a possible segment: if segment.size >= size + 2:
                                        the segment is possible for allocation


    // So if alloc(3) is called, and the freeList is the same as the freeList in freeList.png
    // the first segment is not possible, since segment.size is 4, and we need size 5 (3+2)
    // (The + 2 is for the overhead fields / metadata if the new memory block)
    
    // However the last two segments are possible, since the segment.size meets the criteria   
    

    search the freeList for:
        - the first possible segment (first fit)
        - the smallest possiblee segment (best fit)

    // first fit and best fit are two different algorithms
    // again if alloc(3) is called and freeList = freeList.png. First fit will return the 
    // chunk / segment that has segment.size 7, and best fit will return the chunk / segment
    // that has segment.size 5

    // first fit returns a chunk as quickly as possible, while best fit manages the linked list 
    // better. It is up to you to implement either first fit or best fit, both works.

    
    carve a block that is size+2 large from the segment selected
    return the base address of the block

    // Let's say that we are using the first fit algorithm
    // Well we would have found the segment with segment.size 7.

    // Before allocation:                   After allocation:
       --------                            --------
       |..    |                            |..    | <- this block is still free  
       | 7    |                            |2     |
       |      |                            |      |
       |      |                            |      |
       |      |                            --------
       |      |                            
       |      |                            --------
       |      |                            |0     | <- this block will be handed to the
       |      |                            |3     |    caller
       --------                            |      |
                                           |      |
                                           |      |
                                           --------


deAlloc(object):
    append the object to the end of the freeList 
    (Set the last free chunk's "next" field to point to object-2, need to minus 2 from object,
     so that the "next" field points to the metadata of object)

Using this algorithm, after a few alloc and deAllocs, the ram would look something like this
: photos/ram.png


Own thoughts:
    If the criteria for a possible segment was segment.size >= size, this would work if 
    segment.size = size, but there are some cases where this wouldn't work.

    If segment.size = size, we can just use back the same metadata header, and just
    remove the segment from the linked list.

    Example:
        Let's say that this chunk is in the free linked list.

                     ---------
        8000 next -> |9000   |
        8001 size -> | 5     |
        8002         |       |
        8003         |       |
        8004         |       |
        8005         |       |
        8006         |       |
                     ---------

        If Memory.Alloc(5) is called, we can just remove this chunk from the linked list,
        and return 8002. We don't need to create a new metadata header, we can just use back
        8000 as the metadata header.

        But if Memory.Alloc(4) is called, and we use back the metadata header and change the
        size metadata, 8006 would be like a stranded memory register. It is not a used word,there
        are no pointers pointing to this address, but it is also not in the freeList. You can't 
        even add it to the freeList since it is only one word, not two. 8006 will never be used, 
        and 8006 will become useless.

        If you don't use back the metadata header, you also can't fulfill the requirement.
        You only have 5 words to deal with, whereas you need to use 2 words to create a new
        metadata header, and 4 words for the user (Memory.Alloc(4)). 


    So that is why, the criteria is segment.size >= size + 2.
 


Fragmentation and defragmentation
===================================================================================================
Now notice that the more we recycle chunks, the more we use deAlloc, the more the heap becomes
fragmented,it will contain many segments which are small

Examle of fragmented heap:
        ---------
7000    | 7007  | -------
7001    | 5     |       |
7002    |...    |       |
...     |...    |       |
7006    |...    |       |
7007    | 7016  | <-----     -----
7008    | 7     |                |
7009    |...    |                |
...     |...    |                |
7015    |...    |                |
7016    | 7158  | <---------------     ------
7017    | 3     |                           |
7018    |...    |                           |
7019    |...    |                           v
7020    |...    |                         .....
        ---------                   


Let's say that alloc(12) is called. Even though there are so many free chunks on the heap,
side by side,none of them are big enough to fit 12+2. 

If the 3 free chunks which are side by side would merge, it would create a chunk large enough
to fit 12+2.

This merging of free chunks is called defragmentation.

After defrag: 
        ---------
7000    | 7021  | -------
7001    | 19    |       |
7002    |...    |       |
....    |...    |       |
7020    |...    |       |
7021    |.(next)| <------                       
7022    |.(size)|
7023    |...    |
        ---------

After defrag, the 3 small chunks merge together and creates a big chunk. This allows bigger 
blocks to be allocated from this chunk,allows us to recycle and reuse more memory,and allows
the heap to be much more efficient and clean.

That's why in many operating systems, defrag kicks in every once in a while and tries to
merge as many small segments as it can to become big and continuos segments.

(defrag is not required to be implemented in the Jack OS. If you want to implement it tho,no
problem)


Own thoughts:
    A good time to call defrag() might be in deAlloc().
    After deAlloc() has done its job, it should check if there are any surrounding (the chunk 
    above and the chunk below) free memory chunks that could be merged together. If deAlloc(7500) 
    is called, after freeing 7500, it should check its surrounding and see if there are any free 
    chunks to be merged together. (Just like linux's malloc implementation)
    
    If this is done everytime a memory block is deAlloced, I'm pretty sure every chunk that 
    could be merged, will be merged, and every defrag opportunity will be captured.

    Example:
        ---------
        |chunk1 |       If chunk2,5 and 7 are freed, and then deAlloc(chunk4) is called.
        |...    |       After deAlloc does its magic and free chunk4, defrag(chunk4) will 
        |-------|       be called, and defrag will check the chunk above(chunk3) and the chunk
        |chunk2 |       below(chunk5) to see if they are free chunks. chunk5 is indeed a free 
        |...    |       chunk, so chunk4 merges with chunk5 to form one big chunk. 
        |-------|       (We'll call this chunk mChunk45)
        |chunk3 | 
        |...    |       And then when chunk 1 is freed, th same thing happens, and chunk1 and 2 
        |------ |       will merge together to form one chunk. (We'll call this chunk mChunk12)
        |chunk4 | 
        |...    |       When chunk6 is freed, deFrag checks the chunk above(mChunk45) and the 
        |-------|       chunk below(chunk7) to see if they are free chunks. They are, so chunk6
        |chunk5 |       will merge with chunk7 and also merge with mChunk45 to form one huge   
        |...    |       chunk. (We'll call this chunk mChunk47)
        |-------|   
        |chunk6 |       And finally when chunk3 is freed, chunk3 will merge with mChunk12 and
        |...    |       mChunk47, and everything will be merged together, as one chunk of memory.
        |-------| 
        |chunk7 |       Notice that at any given point in time, everytime there is an oppurtunity 
        |...    |       to merge chunks together, it is taken, there were never two free chunks
        |-------|       sitting side by side.
        |...    | 
        |...    | 
        |...    | 
        ---------



Implementation notes
===================================================================================================

Implementing heap management:
class Memory {
    ...
    static Array heap;
    ...

    function void init(){
        ...
        let heap = 2048 // heapBase
        // In the Hack computer, it is decided that heap starts at address 2048

        let freeList = 2048
        // The whole heap is free.

        let heap[0] = 0; // next
        let heap[1] = 14355; // set the metadata of the free heap / wilderness / topmost chunk
        // freeList contains one segment only, and that is the wilderness.
        // The segment.size is the size of the entire heap - 2 (-2 cause metadata)
    }
}

To access the "next" and "size" properties of a memory block, simply access addr-1 and addr-2

Once we have this "heap" array,we can implement alloc,deAlloc and even deFrag with this array.

Notice that although heap is an array, we didn't call Array.new, instead we just set heap to 2048,
just like how we did it when implementing peek and poke,since Jack is weakly typed.


(If we DID call Array.new in Memory.init, Array.new will call Memory.alloc, and since Memory.init
isn't setup yet, Memory.alloc won't work and so on and so forth. Fun thing to think about.)


The final pseudo code:

init:
    freeList = heapBase
    freeList.size = heapSize
    freeList.next = 0

alloc(size):
    search freeList using best-fit or first-fit:
        to obtain a segment with segment.size >= size + 2

    if no such segment is found, return failure
        (or attempt defragmentation)

    block = base address of the found space

    update the freeList and the fields of block
        to account for the allocation

    return block

deAlloc(object):
    append object to the end of the freeList

(might also need to check if size = 0 in alloc)

And that's it for the Memory class.
