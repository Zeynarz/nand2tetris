Jack is a simple Java-like language,it is Object-based but no support for inheritance

Hello World in Jack:

class Main{
    function void main(){
        //Print text using standard library
        do Output.printString("Hello World!");
        do Output.println();
        return;
    }
}

A Jack program is a collection of one or more classes. (There must be a 'Main' class,and 'Main' must have 
a main function)

The first function of the program that is executed is Main.main
Entry point: Main.main

Arrays:
    -Array is implemented in the standard library
    -Jack arrays are not typed,so int values and bool values can be in the same array

Jack data types:
    Primitive:
        -int
        -char
        -bool

    Class types:
        -OS:Array,String
        -Whatever the programmer invents

Object-based programming using Jack
----------------------------------------
class Fraction{
    field int numerator,denominator;
}

field = properties, so the numerator and denominator are the properties of a Fraction object

The only way to access properties from outside the class are through accessors, stuff like

obj = Fraction.new(3,12)
do Output.printInt(obj.numerator)

is NOT allowed in Jack


Constructor are used to create new objects
Example:

constructor Fraction new(int x,int y){
    let numerator = x; let denominator = y;
    return this; //return the base address of the new object
}

All constructors must return the base addr of the newly created object. So if

obj = Fraction.new(3,12);

If the object is stored at address 4912

obj = 4912 (pointer)

So obj is a pointer.

All methods and functions must return some value too.


All classes that can create an object (all classes that have atleast 1 constructor), must have a method to
'free' the object's memory. (This can be done using an OS function Memory.Dealloc())

So that if an object is not needed anymore,
obj.dispose() can be used to free up memory for other objects

(Jack doesnt have a garbage collector)


All of the objects properties etc are stored in the heap.

Example:
 
let a = Fraction.new(2,3);
let b = Fraction.new(1,5);

//a and b are local variables

Remember that a and b are actually pointers

On the stack, a might be = 4112, and b might be = 15087

And at address 4112, the value will be 1
    at address 4113, the value will be 5

And at address 15087,the value will be 2
    at address 15088,the value will be 3

Visual representation of RAM

                -------
                |...  |
LCL ->          |4112 | (a)
                |15087| (b)
                |...  |
addr 4112 ->    |  1  |
addr 4113 ->    |  5  |
                |...  |
addr 15087 ->   |  2  |
addr 15088 ->   |  3  |
                |...  |
                -------


All of this stuff is handled by the compiler that uses OS calls to do this(most probably smthg like malloc) 


List Processing in a nutshell 
-------------------------------
(NOTE: This is explained much more clearer below, this is just to give a brief introduction)
List is a class in Jack (a class that has a constructor)
List also has 2 methods,print and dispose.

The List in Jack is not rly an array in memory. The properties of a List is data and a List ptr.
A List object is linked together with other List objects to form a linked list.

Example:            Abbreviated as:
(5,null)            (5)
(3,(5,null)         (3,5)
(2,(3,(5,null)))    (2,3,5)


List processing: Creation
--------------------------
List constructor:

class List {
    field int data;
    field List next; //List ptr

    constructor List new(int car,List cdr){
        let data = car;
        let next = cdr;
        return this;
    }
}

So storing (2,3,5) will be:

var List v;

let v = List.new(5,null); // p1 (phase 1)
let v = List.new(3,v); // p2
let v = List.new(2,v); // p3

At p1,
A new List object is created with data = 5,next = null. The address of this object is stored in v

At p2,
Another List object is created with data = 3, next = address of object created at p1. The address of this
object is stored in v

At p2,
Another List object is created with data = 2, next = address of object created at p2. The address of this
object is stored in v

So now there are 3 List objects in memory
An object at addr 1, with data = 5 ,next = null
An object at addr 2, with data = 3 ,next = addr 1
An object at addr 3, with data = 2 ,next = addr 2

(-> means pointing at)
v -> addr3 -> addr2 -> addr1 -> null

Lets say that addr1 = 4000,addr2 = 5000,addr3 = 6000

Visual representation:

                -------
                |...  |
LCL ->          |6000 | (v)
                |...  |
addr 4000 ->    |  5  |
addr 4001 ->    |null |
                |...  |
addr 5000 ->    |  3  |
addr 5001 ->    |4000 |
                |...  |
addr 6000 ->    |  2  |
addr 6001 ->    |5000 |
                |...  |
                -------


List processing: sequential access
-----------------------------------
Will demonstrate sequential access using the List print method

print method:

class List{ 
    method void print(){
        var List current; //Create a List ptr
        let current = this; 
        
        while (~(current == null)){
            do Output.printInt(current.getData());
            do Output.printChar(32); //print a space
            do current = current.getNext();
        }

        return;
    }
}

'this' in a method is the object the method is called upon.
So if v.print()
    v is 'this'

    if obj.print()
    obj is 'this'


Let's continue where we left off earlier.
If v.print() is called:
    current = v

    so now current is pointing at the List object/addr 3.
    after printing the data in the List object, current points to addr 2

    then the data in the List object stored at addr 2 is printed.
    After that current points to addr1, and prints the data of the object stored at addr1.
    


(When you call a method,you actually implicitly pass the object as a parameter to the method)
(So, prob the vmcode would prob be smthg like, push v,call print)


List processing : recursive access
-------------------------------------
Will demonstrate recursive access using dispose method

dispose actually recycles the whole linked list,not only the List object given
so List obj1 -> List obj2 -> List obj3

if List obj1.dispose(), List obj2 and obj 3 will get recycled as well.

dispose method:
class List {
    method void dispose(){
        if (~(next == null)){
            do next.dispose(); 
        }

        do Memory.deAlloc(this);
        return
    }
}

In dispose(),'next' is the 'next' property of 'this'
So if 

test = List.new(12,null)
test.dispose()

'next' is null

Continuing where we left off earlier,
If v.dispose() is called:
    next = addr2
    After the if condition, addr2.dispose() is called

    now next = addr1
    After the if condition, addr1.dispose() is called
    
    now next = null
    And Memory.deAlloc(addr1) is called, then Memory.deAlloc(addr2) is called, then Memory.deAlloc(v) is called
