HDL(Hardware Description Language)
------------------------------------
CHIP someGate{
    IN a,b;
    OUT out;
    
    PARTS:
    //implementation here
}

Let's say we're trying to implement the XOR gate
If we use the previous way to convert truth table to function, XOR function:
f(a,b) = [a AND NOT(b)] OR [NOT(a) AND b]

Gate diagram of XOR gate: https://electronicsphysics.com/wp-content/uploads/2021/06/Circuit-diagram-of-XOR-gate-using-basic-logic-gates-1024x498.jpg

Gate diagram to HDL
---------------------
(In HDL,every output wire of logic gates need names)

CHIP Xor{
    IN a,b;
    OUT out;

    PARTS:
    NOT (in=a,out=nota);
    NOT (in=b,out=notb);
    AND (a=a,b=notb,out=aAndNotb);
    AND (a=nota,b=b,out=notaAndb);
    Or  (a=aAndNotb,b=notaAndb,out=out);
}

HDL is just a textural description of the gate diagram
HDL is a functional / declarative language (Everything happens all at once)

Most popular HDLs are VHDL and Verilog :))

Hardware Simulation
---------------------
(Used to test HDL code?)
Hardware simulator used to test HDL files

Kinds of Simulation:
Interactive: Set input pins yourself and inspect yourself
Script-Based: Write a script to test input pins and output pins
Compare: Compare output generated to the correct output

Interactive
--------------
Set input pins yourself -> evaluate -> inspect output pins (out) or internal pins (aAndNotb etc) yourself
-Kinda tedious bro (prob good to test like one case of input)

Script-Based
------------
load Xor.hdl.
output-file Xor.out,
outpit-list a b out; //output a b and out into Xor.out
set a 0, set b 0, eval, output;
set a 0, set b 1, eval, output;
set a 1, set b 0, eval, output;
set a 1, set b 1, eval, output;

-Automatic (Rly good for testing all input) 

Compare
---------
What to do with the output file generated by script based simulation?
Well you can add a line to the script and compare the output to another file (the 'correct' output)

load Xor.hdl.
output-file Xor.out,
compare-to Xor.cmp, <- Add this line
outpit-list a b out; 

-Really important since you can't really compare gates/chips that have like 10000 outputs by hand

How to generate the 'correct' output/ans?
Use high level languages. 
(There are also a lot of tests out there for example https://github.com/riscv/riscv-tests)


